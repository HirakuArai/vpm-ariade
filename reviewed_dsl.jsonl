{"id": "20250508-code-core-handle-approval-py-handle-appr-v0", "resource": "code://core/handle_approval.py#handle_approval", "observed_state": {"sha256": "7e5a3ec0"}, "inferred_purpose": "承認処理ハンドラ", "confidence": 0.9, "dsl_version": "0.1", "decision_id": "approved-20250508-code-core-handle-approval-py-handle-appr-v0"}
{"id": "20250508-code-core-structure-scanner-py-scan-proj-v0", "resource": "code://core/structure_scanner.py#scan_project_structure", "observed_state": {"sha256": "5d0621a5"}, "inferred_purpose": "プロジェクト構造のスキャン", "confidence": 0.9, "dsl_version": "0.1", "decision_id": "approved-20250508-code-core-structure-scanner-py-scan-proj-v0"}
{"resource": "code://core/handle_approval.py#handle_approval", "code": "def handle_approval(requester, document, approval_status):\n    \"\"\"\n    指定されたドキュメントの承認処理を行います。\n\n    Args:\n        requester (str): 承認を要求するユーザーの名前またはID。\n        document (str): 承認または非承認するドキュメントの名前またはID。\n        approval_status (bool): ドキュメントを承認する場合はTrue、非承認する場合はFalse。\n\n    Returns:\n        str: 承認処理の結果を説明するメッセージ。\n\n    使い方の例:\n        # ドキュメント \"Doc123\" をユーザー \"User456\" が承認する場合\n        result_message = handle_approval(\"User456\", \"Doc123\", True)\n        print(result_message)  # 承認が完了した旨のメッセージを出力\n\n        # ドキュメント \"Doc789\" をユーザー \"User101\" が非承認する場合\n        result_message = handle_approval(\"User101\", \"Doc789\", False)\n        print(result_message)  # 非承認が完了した旨のメッセージを出力\n    \"\"\"\n    pass", "inferred_purpose": "承認ワークフロー処理", "confidence": 0.9, "decision_id": "20250511-review"}
{"resource": "code://core/self_introspection.py#_norm", "code": "def _norm(val: str | None) -> str | None:\n    \"\"\"大小文字・前後空白を無視した ID 正規化\"\"\"\n    return None if val is None else val.strip().lower()", "inferred_purpose": "ID標準化ユーティリティ", "confidence": 0.9, "decision_id": "20250511-review"}
{"resource": "code://core/self_introspection.py#_id_set", "code": "def _id_set(lst: List[Dict[str, Any]]) -> Set[str]:\n    return {_norm(c.get(\"id\")) for c in lst if _norm(c.get(\"id\"))}", "inferred_purpose": "ID集合抽出ユーティリティ", "confidence": 0.9, "decision_id": "20250511-review"}
{"resource": "code://core/log_utils.py#messages_to_text", "code": "def messages_to_text(messages):\n    text = \"\"\n    for m in messages:\n        role = m.get(\"role\", \"user\")\n        content = m.get(\"content\", \"\")\n        text += f\"{role.upper()}: {content}\\n\"\n    return text.strip()", "inferred_purpose": "チャットメッセージ整形ユーティリティ", "confidence": 0.9, "decision_id": "20250511-review"}
{"resource": "code://core/manage_tasks.py#create_task", "code": "def create_task(title, description, due_date, priority):\n    \"\"\"\n    新しいタスクを作成し、保存する。\n    ...\n    \"\"\"\n    pass", "inferred_purpose": "タスク作成処理", "confidence": 0.9, "decision_id": "20250511-review"}
{"resource": "code://core/manage_tasks.py#delete_task", "code": "def delete_task(task_id):\n    \"\"\"\n    指定されたIDのタスクを削除する。\n    ...\n    \"\"\"\n    pass", "inferred_purpose": "タスク削除処理", "confidence": 0.9, "decision_id": "20250511-review"}
{"resource": "code://scripts/register_capabilities.py#merge_capabilities", "code": "def merge_capabilities(registered, new_caps):\n    registered_ids = {cap[\"id\"] for cap in registered}\n    merged = registered[:]\n    added = []\n    for cap in new_caps:\n        if cap[\"id\"] not in registered_ids:\n            cap.setdefault(\"enabled\", True)\n            cap.setdefault(\"requires_confirm\", False)\n            merged.append(cap)\n            added.append(cap)\n    return merged, added", "inferred_purpose": "能力統合処理（重複除外付き）", "confidence": 0.9, "decision_id": "20250511-review"}
{"resource": "code://scripts/capability_diff.py#main", "code": "def main():\n    missing = find_missing_capabilities()\n    if missing:\n        print(f\"❗ Missing capabilities ({len(missing)}):\")\n        for cap in sorted(missing):\n            print(f\" - {cap}\")\n    else:\n        print(\"✅ Kai already has all required capabilities!\")", "inferred_purpose": "不足能力のチェック＆報告", "confidence": 0.9, "decision_id": "20250511-review"}
